--Create staging area table
DROP TABLE IF EXISTS STG_ORDERS; 
CREATE TABLE STG_ORDERS (CHRONO INTEGER,
						SKU_ID INTEGER,
						CHANNEL_ID INTEGER,
						CUSTOMER_ID INTEGER,
						ORDER_ID INTEGER,
						ORDER_DATE DATE,
						CHANNEL VARCHAR(10),
						CATEGORY VARCHAR(20),
						QUANTITY FLOAT,
						AMOUNT FLOAT);
						
--Copy the data from file to staging table
--Eye ball the content
SELECT * FROM STG_ORDERS LIMIT 10;

--Create a new Customer dimension
DROP TABLE IF EXISTS  DIM_CUSTOMER;
CREATE TABLE DIM_CUSTOMER AS (SELECT DISTINCT(CUSTOMER_ID) AS CUSTOMER_NUM 
FROM STG_ORDERS ORDER BY 1);
ALTER TABLE DIM_CUSTOMER ADD COLUMN CUSTOMER_ID SERIAL;
SELECT * FROM DIM_CUSTOMER LIMIT 10;

--Create time dimension
DROP TABLE IF EXISTS DIM_TIME;
CREATE TABLE DIM_TIME AS (SELECT DISTINCT(ORDER_DATE) AS ORDER_DATE 
FROM STG_ORDERS ORDER BY 1);
ALTER TABLE DIM_TIME ADD COLUMN TIME_ID SERIAL;
SELECT * FROM DIM_TIME LIMIT 10;

--Create Channel dimension
DROP TABLE IF EXISTS DIM_CHANNEL;
CREATE TABLE DIM_CHANNEL AS (SELECT DISTINCT(CHANNEL_ID) AS CHANNEL_NUM, ORDER_DATE 
FROM STG_ORDERS ORDER BY 1);
ALTER TABLE DIM_CHANNEL ADD COLUMN CHANNEL_ID SERIAL;
SELECT * FROM DIM_CHANNEL LIMIT 10;

--Create Product dimension
DROP TABLE IF EXISTS DIM_PRODUCT;
CREATE TABLE DIM_PRODUCT AS (SELECT DISTINCT(SKU_ID) AS SKU_ID 
FROM STG_ORDERS ORDER BY 1);
ALTER TABLE DIM_PRODUCT ADD COLUMN PRODUCT_ID SERIAL;
SELECT * FROM DIM_PRODUCT LIMIT 10;

--Create Customer cATEGORY dimension
DROP TABLE IF EXISTS DIM_CUSTOMER_CATEGORY;
CREATE TABLE DIM_CUSTOMER_CATEGORY AS (SELECT DISTINCT(CATEGORY) AS CUSTOMER_CATEGORY 
FROM STG_ORDERS ORDER BY 1);
ALTER TABLE DIM_CUSTOMER_CATEGORY ADD COLUMN CUSTOMER_CATEGORY_ID SERIAL;
SELECT * FROM DIM_CUSTOMER_CATEGORY LIMIT 10;

--Create Keys for Dimension Tables
ALTER TABLE STG_ORDERS ADD COLUMN CUSTOMER_CATEGORY_ID INTEGER;
ALTER TABLE STG_ORDERS ADD COLUMN CUSTOMER_ID_1 INTEGER;
ALTER TABLE STG_ORDERS ADD COLUMN PRODUCT_ID INTEGER;
ALTER TABLE STG_ORDERS ADD COLUMN TIME_ID INTEGER;
ALTER TABLE STG_ORDERS ADD COLUMN CHANNEL_ID_1 INTEGER;
--Eye ball the content
SELECT * FROM STG_ORDERS LIMIT 10;

--BUILD STAR SCHEMA
SELECT * FROM STG_ORDERS LIMIT 5;
DROP TABLE IF EXISTS FACT_CRM;

create table FACT_CRM as (select t1.customer_id as customer_id, 
       t2.time_id as time_id, 
       t3.order_id as order_id, 
       t3.quantity as quantity,
       t3.amount as amount

      from dim_customer t1, dim_time t2, stg_orders t3
      where t1.customer_num = t3.customer_id and
      t2.order_date = t3.order_date);
SELECT COUNT(*) FROM FACT_CRM;
SELECT * FROM FACT_CRM LIMIT 10;


--Build RFM values
SELECT MAX(TIME_ID) FROM FACT_CRM;

DROP TABLE IF EXISTS RFM;
CREATE TABLE RFM AS (SELECT CUSTOMER_ID,
					1047 - MAX(TIME_ID) AS RECENCY,
					COUNT(ORDER_ID) AS FREQUENCY,
					SUM(AMOUNT) AS MONETARY
					FROM FACT_CRM
					WHERE TIME_ID < 1047 AND TIME_ID >847
					GROUP BY CUSTOMER_ID);
SELECT COUNT(*) FROM RFM;
SELECT * FROM RFM LIMIT 10;

--Create response modeling for next visit
DROP TABLE IF EXISTS RFM2;
CREATE TABLE RFM2 AS (SELECT CUSTOMER_ID,
					1047 - MAX(TIME_ID) AS RECENCY,
					COUNT(ORDER_ID) AS FREQUENCY,
					SUM(AMOUNT) AS MONETARY,
					1 AS RESPONSE
					FROM FACT_CRM
					WHERE TIME_ID < 1016
					GROUP BY CUSTOMER_ID);
					
SELECT * FROM RFM2 LIMIT 10;

--UPDATE THE RESPONSE
DROP TABLE IF EXISTS TMP_RESPONSE;
CREATE TABLE TMP_RESPONSE AS (SELECT DISTINCT(CUSTOMER_ID), 
							  0 AS RESPONSE
							  FROM FACT_CRM
							WHERE TIME_ID > 1017);
SELECT * FROM TMP_RESPONSE LIMIT 10;
SELECT COUNT(*) FROM TMP_RESPONSE;
SELECT COUNT(*) FROM RFM2;

--NOW UPDATE RFM2
UPDATE RFM2 SET RESPONSE = T1.RESPONSE FROM TMP_RESPONSE T1 WHERE
						   RFM2.CUSTOMER_ID = T1.CUSTOMER_ID;
--EYE BALL THE DATA
--Check the counts of responses
SELECT RESPONSE, COUNT(*) FROM RFM2 GROUP BY RESPONSE;
SELECT * FROM RFM2 ORDER BY RESPONSE LIMIT 2380;
SELECT * FROM RFM2 LIMIT 10;
